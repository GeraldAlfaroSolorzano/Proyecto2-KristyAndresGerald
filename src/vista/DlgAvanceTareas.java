package vista;

import datos.AlmacenamientoColab;
import datos.AlmacenamientoProyectos;
import datos.AlmacenamientoTareas;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import logica.Colaborador;
import logica.EstadoTarea;
import logica.Proyectos;
import logica.TareasDeProyecto;

/**
 * Dialogo de gestion de colaboradores Permite visualizar, editar y administrar
 * los datos de los colaboradores registrados 
 * Utiliza instancias de AlmacenamientoColab y AlmacenamientoPuestos para operar sobre los datos
 *
 * @author Andres
 */
public class DlgAvanceTareas extends javax.swing.JDialog {

    protected AlmacenamientoTareas listaTareas;
    protected AlmacenamientoColab listaColab;
    protected AlmacenamientoProyectos listaProyectos;

    public DlgAvanceTareas(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        configurarBarra();
    }

    public DlgAvanceTareas(java.awt.Frame parent, boolean modal, AlmacenamientoTareas listaTareas, AlmacenamientoColab listaColab, AlmacenamientoProyectos listaProyectos) {
        super(parent, modal);
        initComponents();
        this.listaTareas = listaTareas;
        this.listaColab = listaColab;
        this.listaProyectos = listaProyectos;
        configurarBarra();
    }

    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblTareas = new javax.swing.JTable();
        lblBuscar = new javax.swing.JLabel();
        lblProyecto = new javax.swing.JLabel();
        lblColab = new javax.swing.JLabel();
        lblEstado = new javax.swing.JLabel();
        cmbColab = new javax.swing.JComboBox();
        cmbProyecto = new javax.swing.JComboBox();
        cmbEstado = new javax.swing.JComboBox();
        txtBuscar = new javax.swing.JTextField();
        barAvance = new javax.swing.JProgressBar();
        jLabel1 = new javax.swing.JLabel();
        lblCant = new javax.swing.JLabel();
        txtCant = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        tblTareas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tblTareas);

        lblBuscar.setText("Buscar");

        lblProyecto.setText("Proyecto");

        lblColab.setText("Colaborador");

        lblEstado.setText("Estado");

        cmbColab.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbColabActionPerformed(evt);
            }
        });

        cmbProyecto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbProyectoActionPerformed(evt);
            }
        });

        cmbEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbEstadoActionPerformed(evt);
            }
        });

        txtBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBuscarActionPerformed(evt);
            }
        });

        jLabel1.setText("Progresion de Avance");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblProyecto)
                                    .addComponent(lblBuscar))
                                .addGap(25, 25, 25)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(cmbProyecto, 0, 192, Short.MAX_VALUE)
                                    .addComponent(txtBuscar)))
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(lblColab)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(cmbColab, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addGap(9, 9, 9)
                                    .addComponent(lblEstado)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cmbEstado, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(barAvance, javax.swing.GroupLayout.PREFERRED_SIZE, 423, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(69, 69, 69))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(222, 222, 222))))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblBuscar)
                            .addComponent(txtBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblProyecto)
                            .addComponent(cmbProyecto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbColab, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblColab))
                        .addGap(18, 18, 18))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(barAvance, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEstado)
                    .addComponent(cmbEstado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        lblCant.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblCant.setText("Cantidad de registros:");

        txtCant.setEditable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblCant)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCant, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 746, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCant)
                    .addComponent(txtCant, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

   /**
     * Se ejecuta al activar la ventana 
     * 
     * @param evt evento de activacion de ventana
     */

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        cargarCombos();
        muestraTabla();
    }//GEN-LAST:event_formWindowActivated

    private void cmbProyectoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbProyectoActionPerformed
        muestraTabla();
    }//GEN-LAST:event_cmbProyectoActionPerformed

    private void cmbColabActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbColabActionPerformed
        muestraTabla();
    }//GEN-LAST:event_cmbColabActionPerformed

    private void cmbEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbEstadoActionPerformed
        muestraTabla();
    }//GEN-LAST:event_cmbEstadoActionPerformed

    private void txtBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBuscarActionPerformed
        muestraTabla();
    }//GEN-LAST:event_txtBuscarActionPerformed

    private void configurarBarra() {
        barAvance.setMinimum(0);
        barAvance.setMaximum(100);
        barAvance.setValue(0);
        barAvance.setStringPainted(true);
        barAvance.setString("0 %");
    }

    // Actualiza valor/texto de la barra
    private void actualizarBarraProyecto(int porcentaje) {
        int p = porcentaje;
        if (p < 0) {
            p = 0;
        }
        if (p > 100) {
            p = 100;
        }
        barAvance.setValue(p);
        barAvance.setString(p + " %");
    }

    
    /**
     * Carga todos los colaboradores en la tabla sin aplicar filtros 
     * 
     */
    private void muestraTabla() {
        String[] columnTitles = {
            "ID", "Nombre", "Proyecto", "Colaborador",
            "Inicio", "Fin", "Duracion", "Estado", "Avance %"
        };

        DefaultTableModel tableModel = new DefaultTableModel(null, columnTitles);

        // Validación de listas
        if (listaTareas == null || listaProyectos == null || listaColab == null) {
            tblTareas.setModel(tableModel);
            txtCant.setText("0");
            actualizarBarraProyecto(0); // usar helper, no setear directamente
            JOptionPane.showMessageDialog(this, "Listas no inicializadas");
            return;
        }

        // Filtros de combos
        Integer filtroIdProyecto = null;
        Object valorProyectoSeleccionado = cmbProyecto.getSelectedItem();
        if (valorProyectoSeleccionado instanceof Proyectos) {
            Proyectos proyectoSeleccionado = (Proyectos) valorProyectoSeleccionado;
            filtroIdProyecto = proyectoSeleccionado.getIdProyecto();
        }

        Integer filtroIdColaborador = null;
        Object valorColaboradorSeleccionado = cmbColab.getSelectedItem();
        if (valorColaboradorSeleccionado instanceof Colaborador) {
            Colaborador colaboradorSeleccionado = (Colaborador) valorColaboradorSeleccionado;
            filtroIdColaborador = colaboradorSeleccionado.getIdColaborador();
        }

        EstadoTarea filtroEstado = null;
        Object valorEstadoSeleccionado = cmbEstado.getSelectedItem();
        if (valorEstadoSeleccionado instanceof EstadoTarea) {
            filtroEstado = (EstadoTarea) valorEstadoSeleccionado;
        }

        // Filtro de texto
        String textoFiltro = txtBuscar.getText();
        if (textoFiltro == null) {
            textoFiltro = "";
        }
        textoFiltro = textoFiltro.toLowerCase();

        int sumaAvance = 0;
        int cantidadTareas = 0;

        for (TareasDeProyecto tarea : listaTareas.mostrar()) {

            // Filtros
            if (filtroIdProyecto != null && tarea.getIdProyecto() != filtroIdProyecto) {
                continue;
            }
            if (filtroIdColaborador != null && tarea.getIdColaborador() != filtroIdColaborador) {
                continue;
            }
            if (filtroEstado != null && tarea.getEstado() != filtroEstado) {
                continue;
            }

            // Nombres relacionados (no IDs)
            String nombreProyecto = listaProyectos.nombrePorId(tarea.getIdProyecto());
            if (nombreProyecto == null) {
                nombreProyecto = "";
            }

            String nombreColaborador = listaColab.nombrePorId(tarea.getIdColaborador());
            if (nombreColaborador == null) {
                nombreColaborador = "";
            }

            // Filtro de texto
            boolean coincideConFiltro = false;

            String idComoTexto = String.valueOf(tarea.getIdTarea());
            if (idComoTexto.contains(textoFiltro)) {
                coincideConFiltro = true;
            }
            if (!coincideConFiltro) {
                String nombreTarea = tarea.getNomTarea();
                if (nombreTarea != null) {
                    String nombreTareaMinusculas = nombreTarea.toLowerCase();
                    if (nombreTareaMinusculas.contains(textoFiltro)) {
                        coincideConFiltro = true;
                    }
                }
            }
            if (!coincideConFiltro) {
                String nombreProyectoMinusculas = nombreProyecto.toLowerCase();
                if (nombreProyectoMinusculas.contains(textoFiltro)) {
                    coincideConFiltro = true;
                }
            }
            if (!coincideConFiltro) {
                String nombreColaboradorMinusculas = nombreColaborador.toLowerCase();
                if (nombreColaboradorMinusculas.contains(textoFiltro)) {
                    coincideConFiltro = true;
                }
            }
            if (!coincideConFiltro) {
                continue;
            }

            // Estado en texto
            String estadoComoTexto = "";
            if (tarea.getEstado() != null) {
                estadoComoTexto = tarea.getEstado().name();
            }

            Object[] fila = new Object[]{
                tarea.getIdTarea(),
                tarea.getNomTarea(),
                nombreProyecto,
                nombreColaborador,
                tarea.getFechInicio(),
                tarea.getFechFin(),
                tarea.getDuracion(),
                estadoComoTexto,
                tarea.getPorcAvance()
            };

            tableModel.addRow(fila);
            sumaAvance += tarea.getPorcAvance();
            cantidadTareas += 1;
        }

        tblTareas.setModel(tableModel);
        txtCant.setText(Integer.toString(tableModel.getRowCount()));

        // Promedio para la barra
        int promedioAvance = 0;
        if (cantidadTareas > 0) {
            promedioAvance = Math.round((float) sumaAvance / (float) cantidadTareas);
        }

        actualizarBarraProyecto(promedioAvance); // <<< ahora sí se usa correctamente
    }

    private void cargarCombos() {
        // --- Proyectos ---
        DefaultComboBoxModel<Proyectos> modeloProy = new DefaultComboBoxModel<>();
        if (listaProyectos != null) {
            java.util.ArrayList<Proyectos> proys = listaProyectos.mostrar();
            if (proys != null) {
                for (int i = 0; i < proys.size(); i++) {
                    Proyectos p = proys.get(i);
                    if (p != null) {
                        modeloProy.addElement(p);
                    }
                }
            }
        }
        cmbProyecto.setModel(modeloProy);
        cmbProyecto.setSelectedIndex(-1); // sin selección por defecto

        // --- Colaboradores ---
        DefaultComboBoxModel<Colaborador> modeloCol = new DefaultComboBoxModel<>();
        if (listaColab != null) {
            java.util.ArrayList<Colaborador> cols = listaColab.getArrayColab();
            if (cols != null) {
                for (int i = 0; i < cols.size(); i++) {
                    Colaborador c = cols.get(i);
                    if (c != null) {
                        modeloCol.addElement(c);
                    }
                }
            }
        }
        cmbColab.setModel(modeloCol);
        cmbColab.setSelectedIndex(-1); // sin selección por defecto

        // --- Estados ---
        DefaultComboBoxModel<EstadoTarea> modeloEst = new DefaultComboBoxModel<>(EstadoTarea.values());
        cmbEstado.setModel(modeloEst);
        cmbEstado.setSelectedIndex(-1); // sin selección por defecto
    }
    

    /**
     * Metodo principal que inicia el dialogo de gestion de colaboradores
     *
     * @param args argumentos de linea de comandos
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DlgAvanceTareas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DlgAvanceTareas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DlgAvanceTareas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DlgAvanceTareas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                DlgAvanceTareas dialog = new DlgAvanceTareas(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar barAvance;
    private javax.swing.JComboBox cmbColab;
    private javax.swing.JComboBox cmbEstado;
    private javax.swing.JComboBox cmbProyecto;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblBuscar;
    private javax.swing.JLabel lblCant;
    private javax.swing.JLabel lblColab;
    private javax.swing.JLabel lblEstado;
    private javax.swing.JLabel lblProyecto;
    private javax.swing.JTable tblTareas;
    private javax.swing.JTextField txtBuscar;
    private javax.swing.JTextField txtCant;
    // End of variables declaration//GEN-END:variables
}
